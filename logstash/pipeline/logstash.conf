input {
	tcp {
		port => 5000
	        type => "elb"
		add_field => {"tags" => ["elb"]}
	}
}

filter {
    if "elb" in [tags]{
        grok {
	      match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE} %{IP:elb_client_ip}:%{NUMBER} %{IP}:%{NUMBER} %{NUMBER:request_processing_time} %{NUMBER:backend_processing_time} %{NUMBER:response_processing_time} (?:%{NUMBER:elb_status_code}|-) (?:%{NUMBER:backend_status_code}|-) %{NUMBER} %{NUMBER:elb_sent_bytes} (?:%{QS:request}|-) (?:%{QS:userAgent}|-)" ]
       }
	}

    
        grok {
                match => [ "request", "%{WORD}\s%{URIPROTO}://%{URIHOST:host}%{URIPATH:upath}%{URIPARAM:params}\s%{GREEDYDATA}"]
		tag_on_failure => ["requestgrokfail"]
        }

        date {
            match => [ "timestamp", "ISO8601" ]
        }

        kv {
            field_split => "&?"
            source => "params"
            exclude_keys => ["callback","cacheBreaker","mdata_id", "phone_number_without_country_code","profile_id","timestamp","profile_first_name","profile_last_name","profile_street1","profile_street2","profile_city","profile_state","profile_postal_code" ]
	}

        useragent {
            source => "userAgent"
	    add_field => { "UA" => "1"}
	    remove_field => ["major","minor","os_major","os_minor"]
        }

    if [UA] == "1"  {
                        if [device] == "Other" { mutate { remove_field => "device" } }
                        if [os_name]   == "Other" { mutate { remove_field => "os_name" } }
                        if [os]     == "Other" { mutate { remove_field => "os" } }
        } 

	mutate {
		remove_field => ["port","host","params","path","_","_score","request","v","userAgent"]
	}
	range {
		ranges => ["q", 8,100, "tag:longquery",
			"term", 8,100, "tag:longautocomplete"]
	}
      }
    



output {
#    stdout { codec => rubydebug }
    elasticsearch{
   hosts => "elasticsearch:9200"
    }
}
